#!/bin/bash

set -e
# set -x

CLOUDIFY_DEBUG=
function debug() {
  if [ -n "$CLOUDIFY_DEBUG" ]; then
    echo "$@"
  fi
}


: ${CLOUDIFY_TARGET_gdrive="$HOME/Google Drive/Locations"}
: ${CLOUDIFY_TARGET_icloud="$HOME/Documents/Locations"}
: ${CLOUDIFY_TARGET_onedrive="$HOME/OneDrive/Locations"}
: ${CLOUDIFY_TARGET_dropbox="$HOME/Dropbox/Locations"}
: ${CLOUDIFY_TARGET_DIRECTORY="$CLOUDIFY_TARGET_icloud"}

CLOUDIFY_FORCE=
CLOUDIFY_COMMAND=cloudify

if [[ "$OSTYPE" = darwin* ]]; then
  # OS X's $HOST changes with dhcp, etc. Use ComputerName if possible.
  CLOUDIFY_HOST=$(scutil --get ComputerName 2>/dev/null) || CLOUDIFY_HOST=${HOST/.*/}
else
  CLOUDIFY_HOST=${HOST/.*/}
fi
if [ -z "$CLOUDIFY_HOST" ]; then
  echo "Cannot resolve hostname" >&2
  exit 1
fi

function cloudify_path() {
  local basename="$(echo "${1#/}" | sed -e 's;~;~-;g' -e 's;/;~~;g')"
  echo "$CLOUDIFY_TARGET_DIRECTORY/$CLOUDIFY_HOST/$basename"
}

function uncloudify_path() {
  basename "$1" | sed -e 's;~~;/;g' -e 's;~-;~;g' -e 's;^;/;'
}

function cloudify() {
  debug "target: $CLOUDIFY_TARGET_DIRECTORY/$CLOUDIFY_HOST"
  mkdir -p "$CLOUDIFY_TARGET_DIRECTORY/$CLOUDIFY_HOST"
  local path target
  for f; do
    path="$(realpath "$f")"
    target="$(cloudify_path "$path")"
    if [ -f "$target" ] && [ -z "$CLOUDIFY_FORCE" ]; then
      echo "$f is already in the cloud, use -f to force overwriting" >&2
    else
      debug "cloudify $path to $target"
      cp -f "$path" "$target"
      ln -snf "$target" "$path"
    fi
  done
}

function uncloudify() {
  local path
  for f in "$@"; do
    if ! [ -L "$f" ]; then
      echo "$f is not a symbol link" >&2
    else
      path="$(realpath "$f")"
      debug "uncloudify $path to $f"
      mv -f "$path" "$f"
    fi
  done
}

function _restore() {
  local target dir
  for f; do
    target="$(uncloudify_path "$f")"
    dir="$(dirname "$target")"
    if [ -f "$target" ] && [ -z "$CLOUDIFY_FORCE" ]; then
      echo "$target is already in local, use -f to force overwriting" >&2
    elif ! [ -d "$dir" ] && [ -z "$CLOUDIFY_FORCE" ]; then
      echo "$dir does not exist, use -f to force creating it" >&2
    else
      mkdir -p "$dir"
      ln -snf "$(realpath "$f")" "$target"
    fi
  done
}

function restore() {
  if [ "$#" -gt 0 ]; then
    _restore "$@"
  else
    _restore "$CLOUDIFY_TARGET_DIRECTORY/$CLOUDIFY_HOST/"*
  fi
}

function main() {
  local target_type=

  while [ "$#" -gt 0 ]; do
    case "$1" in
      -t|--target)
        shift
        target_type="CLOUDIFY_TARGET_$1"
        CLOUDIFY_TARGET_DIRECTORY="${!target_type}"
        shift
        ;;
      --target=*)
        target_type="CLOUDIFY_TARGET_${1#*=}"
        CLOUDIFY_TARGET_DIRECTORY="${!target_type}"
        shift
        ;;
      -f|--force)
        CLOUDIFY_FORCE=true
        shift
        ;;
      -d|--debug)
        CLOUDIFY_DEBUG=true
        shift
        ;;
      -r|--restore)
        CLOUDIFY_COMMAND=restore
        shift
        ;;
      -u|--uncloudify)
        CLOUDIFY_COMMAND=uncloudify
        shift
        ;;
      -h|--help)
        echo "Usage: cloudify [-r|-u] file"
        echo ""
        echo "Move file to directory synced to cloud and replace original one with a symbol link. The file can be restored using -r and delete from cloud using -u."
        echo ""
        echo -e "\t-r|--restore restores a file from cloud, a.k.a, makes symbol link to cloud file."
        echo -e "\t-u|--uncloudify replaces symbol link with the real file, and delete it from cloud."
        echo -e "\t-t|--target TARGET selects icloud (default), gdrive, onedrive, dropbox"
        echo -e "\t-f|--force forces overwriting files"
        echo ""
        echo -e "\t-h|--help shows this"
        echo -e "\t-d|--debug prints debug messages"
        exit 0
        ;;
      -*)
        echo "Unknown option $1" >&2
        exit 1
        ;;
      *)
        break
        ;;
    esac
  done

  debug "host: $CLOUDIFY_HOST"
  debug "command: $CLOUDIFY_COMMAND"
  $CLOUDIFY_COMMAND "$@"
}

main "$@"
