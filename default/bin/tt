#!/usr/bin/env zsh

set -e
[ -n "$TT_DEBUG" ] && set -x

function help() {
  echo 'Usage: tt [-L] [-C] [-t <target>] [-n|-s|-h|-v|-N <name>|-S <name>] key ...'
  echo
  echo '-L Do not send keys literally, recoganize keycode name.'
  echo '-C do not send C-m automatically at the end.'
  echo '-p Print target session.'
  echo '-t Send to selected target, use active pane by default. When used with other creation option, create new pane in this target.'
  echo '-l Send to target used in last invocation.'
  echo
  echo 'Creation Options'
  echo
  echo '-s        Send keys to new session'
  echo '-S <name> Send keys to new session with specified name'
  echo '-n        Send keys to new window'
  echo '-N <name> Send keys to new window with specified name'
  echo '-h        Send keys to new pane split horizontally'
  echo '-v        Send keys to new pane split vertically'
}

function main() {
  local attach
  local target
  local commit=C-m
  local print_target
  local -a creation_opts
  local -a tmux_cmd
  local tmux_send_opt_l=-l
  while [ "$#" -gt 0 ]; do
    case "$1" in
      --help)
        help
        exit 0
        ;;
      -s)
        shift
        tmux_cmd=(env "TMUX=" tmux new-session -d -P)
        ;;
      -S)
        shift
        tmux_cmd=(env "TMUX=" tmux new-session -d -P -s "$1")
        shift
        ;;
      -n)
        shift
        tmux_cmd=(env "TMUX=" tmux new-window -d -P)
        ;;
      -N)
        shift
        tmux_cmd=(env "TMUX=" tmux new-window -d -P -n "$1")
        shift
        ;;
      -h|-v)
        tmux_cmd=(env "TMUX=" tmux split-window -d $1 -P)
        shift
        ;;
      -a)
        shift
        attach=true
        ;;
      -t)
        shift
        target="$1"
        creation_opts=(-t "$1")
        shift
        ;;
      -l)
        shift
        target="$([ -f ~/.tt_target ] && cat ~/.tt_target || true)"
        if [ -n "$target" ]; then
          creation_opts=(-t "$target")
        fi
        ;;
      -L)
        tmux_send_opt_l=
        shift
        ;;
      -C)
        commit=
        shift
        ;;
      -p)
        print_target=true
        shift
        ;;
      --)
        shift
        break
        ;;
      -*)
        help
        exit 1;
        ;;
      *)
        break
        ;;
    esac
  done

  if [ "${#tmux_cmd[@]}" -gt 0 ]; then
    if [ "${#creation_opts[@]}" -gt 0 ] && [ "${tmux_cmd[4]}" != "new-session" ]; then
      tmux_cmd+=("${creation_opts[@]}")
    fi
    target="$("${tmux_cmd[@]}")"
  fi
  echo "$target" > ~/.tt_target

  local session="${target%%:*}"
  session="${session#=}"

  local has_session_result="$(tmux has-session -t "$target" 2>&1)"
  local has_session_status="$?"
  if ! [ "$has_session_status" = 0 ]; then
    if [ -z "$session" ]; then
      env TMUX= tmux new-session -d
    else
      echo "$has_session_result" >&2
      exit "$has_session_status"
    fi
  fi

  if [ "$#" = 0 ]; then
    if [ -z "$TMUX" ]; then
      tmux -u attach-session -t "$target"
    else
      tmux -u switch-client -t "$target"
    fi
  else
    if [ -n "$tmux_send_opt_l" ]; then
      tmux send-keys $tmux_send_opt_l -t "$target" "$*"
    else
      tmux send-keys -t "$target" "$@"
    fi

    if [ -n "$commit" ]; then
      tmux send-keys -t "$target" "$commit"
    fi

    if [ -n "$attach" ]; then
      if [ -z "$TMUX" ]; then
        tmux -u attach-session -t "$target"
      else
        tmux -u switch-client -t "$target"
      fi
    fi
  fi

  if [ -n "$print_target" ]; then
    echo "$target"
  fi
}

main "$@"
