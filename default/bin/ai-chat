#!/usr/bin/env python3
# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4

import argparse
import os
import re
import sys
from pathlib import Path

from openai import OpenAI

brain_dir = Path.home() / "Dropbox" / "Brain"
if not brain_dir.exists():
    brain_dir = Path.home() / "Brain"
OPENAI_PROMPTS_FILE = (
    brain_dir / "para" / "lets" / "c" / "ChatGPT Sessions" / "ChatGPT Prompts.md"
)


def get_preset_name(line):
    return line[3:].split(" !")[0].strip()


def list_presets():
    """List all available presets."""
    with open(OPENAI_PROMPTS_FILE, "r") as f:
        for line in f:
            if line.startswith("## "):
                # Strip any tags after the preset name
                yield get_preset_name(line)


def get_preset(name):
    lines = []
    is_preset_line = False
    with open(OPENAI_PROMPTS_FILE, "r") as f:
        for line in f:
            if is_preset_line:
                if line.startswith("## "):
                    break
                else:
                    lines.append(line)
            elif line.startswith("## ") and get_preset_name(line) == name:
                is_preset_line = True

    if len(lines) > 0:
        return "".join(lines).strip()


PARAMETER_LINE_RE = re.compile(r"^\*\*(\w+)\*\*:: (.+)")
ROLE_LINE_RE = re.compile(r"^### \.(System|User|Assistant)")


def build_request_for_session(session, **kwargs):
    req = kwargs

    if "model" not in req:
        url = os.environ.get("OPENAI_BASE_URL")
        if "deepseek" in url:
            req["model"] = "deepseek-chat"
        elif "perplexity" in url:
            req["model"] = "sonar-pro"
    req["messages"] = req.get("messages", [])

    role = None
    content = []
    for line in session.splitlines(keepends=True):
        match = PARAMETER_LINE_RE.match(line)
        if match:
            req[match[1]] = match[2]
            continue

        match = ROLE_LINE_RE.match(line)
        if match:
            if role is not None:
                req["messages"].append(
                    {"role": role, "content": "".join(content).strip()}
                )
                content = []
            role = match[1].lower()
            continue

        content.append(line)

    if (len(req["messages"]) == 0 or role is not None) and len(content) > 0:
        req["messages"].append(
            {"role": (role or "user"), "content": "".join(content).strip()}
        )

    return req


def get_variable(name):
    if name == "input":
        return sys.stdin.read()
    else:
        os.environ.get(name)


def substitute_variables(session):
    return re.sub(
        r"\${([a-zA-Z][a-zA-Z0-9_]*)}",
        lambda m: get_variable(m[1]),
        session,
    )


def handle_list():
    for p in list_presets():
        print(p)


def handle_show(name):
    preset = get_preset(name)
    if preset is not None:
        print(preset)
    else:
        print(f"preset {name} not found", file=sys.stderr)
        sys.exit(-1)


def handle_preset(args):
    preset = get_preset(args.name)
    session = substitute_variables(preset)
    kwargs = {}
    if args.model is not None:
        kwargs["model"] = args.model
    req = build_request_for_session(session, **kwargs)

    client = OpenAI()
    completion = client.chat.completions.create(**req)
    print(completion.choices[0].message.content)


def handle_not_implemented():
    raise NotImplementedError


def build_argument_parser():
    parser = argparse.ArgumentParser(description="ai-chat")
    parser.add_argument(
        "-v", "--verbose", action="store_true", help="Enable verbose output"
    )
    parser.add_argument(
        "-n",
        "--dry-run",
        action="store_true",
        help="Don't actually send requests to API",
    )

    subparsers = parser.add_subparsers(help="action", dest="action")

    subparsers.add_parser("list", help="list prompts")
    show_parser = subparsers.add_parser("show", help="print the promopt")
    show_parser.add_argument("name")
    preset_parser = subparsers.add_parser(
        "preset", aliases=["p"], help="use the preset"
    )
    preset_parser.add_argument("-m", "--model", help="choose the AI model")
    preset_parser.add_argument("name")

    subparsers.add_parser("help", help="show this help message")

    return parser


def main():
    parser = build_argument_parser()
    args = parser.parse_args()
    if args.action is None:
        parser.print_help()
        sys.exit(0)

    handlers = {
        "help": lambda: parser.print_help(),
        "list": handle_list,
        "show": lambda: handle_show(args.name),
        "preset": lambda: handle_preset(args),
    }
    handlers["p"] = handlers["preset"]

    handler = handlers.get(args.action, handle_not_implemented)
    handler()


main()
