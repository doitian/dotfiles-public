#!/usr/bin/env bash

set -e
set -u
[ -n "${DEBUG:-}" ] && set -x || true

OPTION_VERBOSE=
OPTION_DRY_RUN=
: ${OPENAI_MODEL:=gpt-3.5-turbo}
: ${OPENAI_PROMPTS_FILE:="$HOME/Dropbox/Brain/para/lets/c/ChatGPT Sessions/ChatGPT Prompts.md"}
OPENAI_PROMPTS_FILE_ALTERNATIVE="$HOME/Brain/para/lets/c/ChatGPT Sessions/ChatGPT Prompts.md"
if [ -f "$OPENAI_PROMPTS_FILE_ALTERNATIVE" ] && ! [ -f "$OPENAI_PROMPTS_FILE" ]; then
  OPENAI_PROMPTS_FILE="$OPENAI_PROMPTS_FILE_ALTERNATIVE"
fi

: ${AZURE_API_VERSION:=2024-02-15-preview}
: ${AZURE_RESOURCE_NAME:=doitian-chatgpt}
: ${AZURE_MODEL:=gpt-35-turbo-16k}

: ${OPENAI_BACKEND:=azure}

jsonize_messages() {
  while [ "$#" != 0 ]; do
    jq --null-input --compact-output --arg role "$2" --arg content "$3" \
      '{"role": $role, "content": $content}'
    shift
    shift
    shift
  done | jq --slurp --compact-output '{messages: .}'
}

call_api() {
  if [ "$OPENAI_BACKEND" = "openai" ]; then
    if [ -z "${OPENAI_API_KEY:-}" ]; then
      local credentials="$(gopass show key/openai.com/personal)"
      export OPENAI_API_KEY="$(echo "$credentials" | head -1)"
      eval "$(echo "$credentials" | tail -n '+2' | sed -e 's/^\([^:]*\): /export \1=/')"
    fi
    openai api chat_completions.create -m "${OPENAI_MODEL}" "$@"
    echo
  else
    if [ -z "${AZURE_API_KEY:-}" ]; then
      local credentials="$(gopass show key/azure.com/doitian-chatgpt)"
      export AZURE_API_KEY="$(echo "$credentials" | head -1)"
    fi

    local endpoint="https://${AZURE_RESOURCE_NAME}.openai.azure.com/openai/deployments/${AZURE_MODEL}/chat/completions?api-version=${AZURE_API_VERSION}"
    curl -s -X POST -H "api-key: ${AZURE_API_KEY}" -H "Content-Type: application/json" -d "$(jsonize_messages "$@")" "$endpoint" | jq -r ".choices[0].message.content"
  fi
}

send_session() {
  local args=()
  local content_lines=()
  local line role content
  while read -r line; do
    case "$line" in
    \*\*model\*\*::\ *)
      OPENAI_MODEL="${line##*:: }"
      AZURE_MODEL="${OPENAI_MODEL}"
      ;;
    \*\**\*\*::\ *)
      local parameter_name="${line#\*\*}"
      parameter_name="${parameter_name%%\*\*::*}"
      args+=("--${parameter_name}" "${line##*:: }")
      ;;
    "### .System" | "### .User" | "### .Assistant" | "### .x"*)
      if [ -n "${role:=}" ] && ! [[ $role == x* ]]; then
        content="$(printf "%s\n" "${content_lines[@]}" | sed -e :a -e '/./,$!d;/^\n*$/{$d;N;};/\n$/ba')"
        if [ -n "$content" ]; then
          args+=(-g "$role" "$content")
        fi
      fi
      role="$(echo "${line#* .}" | tr 'A-Z' 'a-z')"
      content_lines=()
      ;;
    *)
      content_lines+=("$line")
      ;;
    esac
  done <<<"$1"
  if [ "${#args[@]}" = 0 ]; then
    role=user
  fi
  if [ -n "$role" ] && ! [[ $role == x* ]]; then
    content="$(printf "%s\n" "${content_lines[@]}" | sed -e :a -e '/./,$!d;/^\n*$/{$d;N;};/\n$/ba')"
    if [ -n "$content" ]; then
      args+=(-g "$role" "$content")
    fi
  fi
  if [ -z "${http_proxy:-}" ]; then
    eval $(gfw)
  fi
  if [ "${#args[@]}" != 0 ]; then
    call_api "${args[@]}" | sed -e :a -e '/./,$!d;/^\n*$/{$d;N;};/\n$/ba'
  fi
}

get_preset() {
  local name="$1"
  sed -n -E "/^## ${name}( !.*)?$/I,/^## /{/^## /!p;}" "$OPENAI_PROMPTS_FILE" | sed -e :a -e '/./,$!d;/^\n*$/{$d;N;};/\n$/ba'
}

handle_usage() {
  echo "ai-chat [-s] [-n] [session|p|present|show|list|search]"
}

handle_list() {
  sed -n -e s'/ !.*//' -e 's/^## //p' "$OPENAI_PROMPTS_FILE" | tail +2
}

handle_show() {
  local name="${1:-}"
  if [ -z "$name" ]; then
    name="$(handle_list | fzf --preview 'ai-chat show {}')"
  fi
  if [ -z "$name" ]; then
    echo "ai-chat preset name"
    exit 1
  fi
  get_preset "$name"
}

handle_session() {
  if [ -t 0 ]; then
    echo "Session (Ctrl-D to Finish) >"
  fi
  local input="$(cat)"
  if ! grep -q '^### \.\(User\|System\|Assistant\)$' <<<"$input"; then
    input="### .User

$input"
  fi

  if [ -n "$OPTION_VERBOSE" ]; then
    echo "#chatgpt-session"
    echo
    echo "$input"
    if [ -z "$OPTION_DRY_RUN" ]; then
      echo
      echo "## Assistant"
      echo
    fi
  fi
  if [ -z "$OPTION_DRY_RUN" ]; then
    send_session "$input"
  fi
}

handle_preset() {
  local preset="$(handle_show "$*")"
  if grep -q '{input}' <<<"$preset"; then
    if [ -t 0 ]; then
      echo "Input (Ctrl-D to Finish) >"
    fi
    local input="$(cat)"
    export input
  fi
  preset="$(envsubst <<<"$preset")"

  local HIST="$HOME/.chatgpt_history"
  echo "#chatgpt-session" >"$HIST.$$"
  echo >>"$HIST.$$"
  echo "$preset" >>"$HIST.$$"
  if [ -z "$OPTION_DRY_RUN" ]; then
    echo >>"$HIST.$$"
    echo "## Assistant" >>"$HIST.$$"
    echo >>"$HIST.$$"
  fi

  if [ -n "$OPTION_VERBOSE" ]; then
    cat "$HIST.$$"
  fi

  if [ -z "$OPTION_DRY_RUN" ]; then
    send_session "$preset" | tee -a "$HIST.$$"
  fi

  rm -f "$HIST"
  mv -f "$HIST.$$" "$HIST"
}

handle_search() {
  chatgpt-prompts | fzf -m --preview 'jq -C <<< {}' | jq -r .description
}

main() {
  while [[ "${1:-}" = -* ]]; do
    case "$1" in
    -v | --verbose)
      OPTION_VERBOSE=yes
      shift
      ;;
    -n | --dry-run)
      OPTION_DRY_RUN=yes
      shift
      ;;
    -h | --help)
      handle_usage
      exit 0
      ;;
    *)
      handle_usage
      echo 1
      ;;
    esac
  done

  local action=
  if (($# > 0)); then
    action="$1"
    shift
  fi

  case "x$action" in
  x | xsession)
    handle_session
    ;;
  xp | xpreset)
    handle_preset "$*"
    ;;
  xshow)
    handle_show "$*"
    ;;
  xlist)
    handle_list
    ;;
  xsearch)
    handle_search
    ;;
  help)
    handle_usage
    exit 0
    ;;
  *)
    handle_usage
    exit 1
    ;;
  esac
}

main "$@"
