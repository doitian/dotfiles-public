# vim: ft=gitconfig noexpandtab
[alias]
	snapshot = "!f() { git stash push -u -m \"snapshot-$(date '+%Y%m%d%H%M%S')\" && git stash apply \"stash@{0}\"; }; f"
	# git fetch origin "refs/stashes/*:refs/stashes/*" | ls-remote | update-ref -d
	pushsnap = "!f() { git push origin \"stash@{0}:refs/stashes/$(git stash list --pretty='%s' -1 \"$@\" | sed -e 's/^On //' -e 's/^WIP on/wip/' -e 's/: /\\//' -e 's/[^\\/a-zA-Z0-9_-]/-/g')\"; }; f"

	br = branch
	bl = branch --format "%(refname:short)"
	publish = "!git push origin -u \"$(git branch --show-current)\""

	cm = commit
	ca = commit --amend
	# resume the last failed commit
	commit-resume = "!f() { git commit -e -F \"$(git rev-parse --git-dir)/COMMIT_EDITMSG\" \"$@\"; }; f"
	wip = commit -n -m WIP
	print-commit-message = log --pretty="format:%B"

	co = checkout
	cb = checkout -b
	rs = restore --staged

	cp = cherry-pick

	# https://github.blog/2020-12-21-get-up-to-speed-with-partial-clone-and-shallow-clone/

	clone-blobless = clone --filter=blob:none
	clone-treeless = clone --filter=tree:0
	clone-shallow = clone --depth=1
	fsmonitor = "!f() { git config core.fsmonitor true; git config core.untrackedCache true; }; f"

	# show difference between working tree and the index
	di = diff --stat -p
	# what would be committed with "git commit"
	dc = diff --stat -p --cached
	# what would be committed with "git commit -a"
	da = diff --stat -p HEAD
	# show difference between working tree and the index
	dis = diff --stat
	# what would be committed with "git commit"
	dcs = diff --stat --cached
	# what would be committed with "git commit -a"
	das = diff --stat HEAD

	fp = format-patch -s

	# log list
	l = log --pretty=tformat:'%C(auto)%h %s %C(blue dim)<%aN %ad>%C(auto)%d' --date=relative
	# log list with graph
	lg = l --graph
	# the last log
	l1 = !git --no-pager log -1 --decorate --date=relative
	lp = log -p
	stat = log --stat

	# search commits that has changed the string occurrences number
	log-search-changed = log -S
	# search commnts that has changed a function, usage :fname:file or /regex/,/regex/:file
	log-search-function = log -L
	# search commits which changes matched the regex
	log-grep = log -G

	rb = rebase
	rbc = rebase --continue
	rba = rebase --abort
	rbs = rebase --skip

	st = status --short --branch -u
	dotfiles = "!git multistatus ~/.dotfiles ~/.dotfiles/repos/public ~/.dotfiles/repos/private ~/Dropbox/Brain"
	all = "!f() { fd -t d -I -H -g --prune \"$@\" .git -X git multistatus \"{//}\"; }; f"
	ms = multistatus

	ls = ls-files
	rg = "!git ls-files -z | xargs -0 rg"

	assume = update-index --assume-unchanged
	unassume = update-index --no-assume-unchanged
	assumed = "!git ls-files -v | grep '^h' | cut -c 3-"
	unassumeall = "!git assumed | xargs -I {} git update-index --no-assume-unchanged '{}'"
	assumeall = "!git status -s | awk {'print $2'} | xargs -I {} git update-index --assume-unchanged '{}'"
	exclude = "!f() { dir=$(git rev-parse --git-dir 2> /dev/null); [ -n \"$dir\" ] || return 1; for i in \"$@\"; do echo \"$i\" >> \"$dir\"/info/exclude; done; }; f"

	lasttag = describe --tags --abbrev=0

	ours = "!f() { git checkout --ours \"$@\" && git add \"$@\"; }; f"
	theirs = "!f() { git checkout --theirs "$@" && git add \"$@\"; }; f"

	purr = pull --rebase
	new = "!f() { git init; cp ~/.ignore .gitignore; git add -f .gitignore; git commit -m 'initial commit'; }; f"

	ready = rebase -i @{u}
	whatsup = diff @{u}
	giveup = reset --hard @{u}

	wt = worktree
	wta = worktree add
	wtl = worktree list
	fwt = "!f() { git worktree list | fzf --accept-nth 1; }; f"

	me = "!f() { git config user.email __EMAIL__; git config user.signingkey FD7051CE32E62CE7; git config commit.gpgSign true; }; f"

	# stage files via fzf
	fa = "!f() { git diff --name-only | fzf -m --print0 --preview 'git diff --color -- {}' | xargs -0 git add \"$@\"; }; f"
	# add untracked files via fzf
	ft = "!f() { git ls-files --other --exclude-standard | fzf -m --print0 --preview 'dog {}' | xargs -0 git add \"$@\"; }; f"
	# unstage files via fzf
	frs = "!f() { git diff --name-only --cached | fzf -m --print0 --preview 'git diff --color --cached -- {}' | xargs -0 git restore --staged \"$@\"; }; f"
	# show difference between working tree and the index via fzf
	fdi = "!f() { git diff --name-only | fzf -m --print0 --preview 'git diff --color -- {}' | xargs -0 git diff -p --stat; }; f"
	# show what would be committed with "git commit" via fzf
	fdc = "!f() { git diff --name-only --cached | fzf -m --print0 --preview 'git diff --color --cached -- {}' | xargs -0 git diff --cached -p --stat; }; f"
	# show what would be committed with "git commit -a" via fzf
	fda = "!f() { git diff --name-only HEAD | fzf -m --print0 --preview 'git diff --color HEAD -- {}' | xargs -0 git diff -p --stat HEAD; }; f"
	# fzf log
	fl = fzf-log
	# fzf show commit
	fsc = fzf-show-commit

	dt = difftool
	mt = mergetool
	nvim-diff = difftool --tool nvimdiff
	# Use Neovim with a 4 panes layout
	nvim-merge = mergetool --tool nvimdiff
	# Use Neovim with a 2 panes layout (LOCAL and REMOTE)
	nvim-merge1 = mergetool --tool nvimdiff
	# Use Neovim with a 3 panes layout (LOCAL, MERGED and REMOTE)
	nvim-merge2 = mergetool --tool nvimdiff
  # Use Neovim where only the MERGED file is shown
	nvim-merge3 = mergetool --tool nvimdiff
	lazy = "!lazygit -g \"$(git rev-parse --git-dir)\""

[user]
	name = __NAME__
	useConfigOnly = true
[core]
	excludesFile = "__HOME__/.ignore"
	attributesFile = "__HOME__/.gitattributes"
	autocrlf = false
	safecrlf = true
	quotePath = off
	preloadIndex = true
[init]
	defaultBranch = main
[gc]
	auto = 256

[log]
	date = iso
[pull]
	ff = only
[push]
	default = upstream
[rerere]
	enabled = true
[rebase]
	updateRefs = true

[diff]
	algorithm = patience
	colorMoved = default
[difftool]
	prompt = false
	trustExitCode = true
[merge]
	conflictStyle = diff3
	defaultToUpstream = true
[mergetool]
	prompt = false
	trustExitCode = true

[difftool "vscode"]
	cmd = code --wait --diff $LOCAL $REMOTE
[mergetool "vscode"]
	cmd = code --wait $MERGED

[color "diff"]
	meta = blue
	newMoved = cyan bold
	newMovedAlternative = blue bold
	oldMoved = magenta dim
	oldMovedAlternative = yellow dim

[pager]
	branch = false

[gitflow "branch"]
	master = main

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

[machete "github"]
	forceDescriptionFromCommitMessage = true
