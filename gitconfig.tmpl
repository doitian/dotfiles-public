[alias]
  snapshot = "!f() { git stash save -u \"snapshot $(date)\" && git stash apply \"stash@{0}\"; }; f"

  br = branch
  whereami = rev-parse --abbrev-ref HEAD

  cm = commit
  ca = commit --amend
  co = checkout
  cb = checkout -b

  cp = cherry-pick

  di = diff -p --stat # show difference between working tree and the index
  dc = diff --cached -p --stat # what would be committed with "git commit"
  da = diff -p --stat HEAD # what would be committed with "git commit -a"
  ds = diff --stat # show different files between working tree and the index
  dt = difftool
  last = diff HEAD^

  fp = format-patch -s

  l = log --pretty=tformat:'%C(auto)%h %s <%aN %ad>' --date=relative
  lg = log --pretty=tformat:'%C(auto)%h %s <%aN %ad>%d' --date=relative --decorate --graph
  l1 = !git --no-pager log -1 --decorate --date=relative
  lref = log --pretty=tformat:'%C(auto)%h %aN %s %ad' --date=relative 'HEAD@{1}'...
  lpref = log -p --pretty=tformat:'%C(auto)%h %aN %s %ad' --date=relative 'HEAD@{1}'...
  lp = log -p
  stat = log --stat

  mt = mergetool

  mb = !git merge-base HEAD \"$(git config --get user.reviewBase || echo master)\"
  cpr = "!f() { git current -u; gh pr create \"$@\"; }; f"

  del = "!f() { git reset HEAD \"$@\"; git clean -f -- \"$@\"; git checkout -- \"$@\" 2>/dev/null; }; f"

  rb = rebase
  rc = rebase --continue
  ra = rebase --abort
  rs = rebase --skip

  st = status --short --branch
  dotfiles = "!git multistatus ~/.dotfiles ~/.dotfiles/repos/public ~/.dotfiles/repos/private"
  all = "!f() { find . -maxdepth 4 -type d -name .git \"$@\" -prune | sed 's/.git$//' | xargs git multistatus; }; f"

  ls = ls-files
  grep = grep -Ii
  rg = "!git ls-files -z | xargs -0 rg"

  assume = update-index --assume-unchanged
  unassume = update-index --no-assume-unchanged
  assumed = "!git ls-files -v | grep '^h' | cut -c 3-"
  unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
  assumeall = "!git status -s | awk {'print $2'} | xargs git assume"
  exclude = "!f() { dir=$(git rev-parse --show-toplevel 2> /dev/null); [ -n \"$dir\" ] || return 1; for i in \"$@\"; do echo \"$i\" >> \"$dir\"/.git/info/exclude; done; }; f"

  lasttag = describe --tags --abbrev=0

  ours = "!f() { git checkout --ours \"$@\" && git add \"$@\"; }; f"
  theirs = "!f() { git checkout --theirs "$@" && git add \"$@\"; }; f"

  purr = pull --rebase
  new = "!f() { git init; cp ~/.ignore .gitignore; git add -f .gitignore; git commit -m 'initial commit'; }; f"

  ready = rebase -i @{u}
  whatsup = diff @{u}
  giveup = reset --hard @{u}

  me = "!f() { git config user.email __EMAIL__; git config user.signingkey FD7051CE32E62CE7; git config commit.gpgSign true; }; f"
  config-review-base = config user.reviewBase
  config-current-remote = config user.currentRemote

[core]
  excludesfile = "__HOME__/.ignore"
  autocrlf = false
  quotepath = off
[init]
  defaultBranch = main

[log]
  date = iso
[pull]
  ff = only
[push]
  default = simple
[diff]
  algorithm = patience
[difftool]
  prompt = false
[merge]
  defaultToUpstream = true
[mergetool]
  prompt = false

[url "ssh://git@github.com/"]
  pushInsteadOf = https://github.com/

[rerere]
  enabled = true

[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true

[user]
  name = __NAME__
  useConfigOnly = true

[pager]
  branch = false

[color "diff"]
  meta = blue bold

