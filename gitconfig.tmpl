[alias]
  snapshot = "!f() { git stash save -u \"snapshot $(date)\" && git stash apply \"stash@{0}\"; }; f"

  a = add
  aa = add -A
  au = add -u

  b = branch -v
  br = branch
  whereami = rev-parse --abbrev-ref HEAD

  cm = commit
  ca = commit --amend
  co = checkout
  cb = checkout -b

  cp = cherry-pick

  di = diff -p --stat # show difference between working tree and the index
  dc = diff --cached -p --stat # what would be committed with "git commit"
  da = diff -p --stat HEAD # what would be committed with "git commit -a"
  ds = diff --stat # show different files between working tree and the index
  dt = difftool
  last = diff HEAD^

  fp = format-patch -s

  sa = stash
  sl = stash list
  sp = stash pop

  l = log --pretty=tformat:'%C(auto)%h %s <%aN %ad>' --date=relative
  lg = log --pretty=tformat:'%C(auto)%h %s <%aN %ad>%d' --date=relative --decorate --graph
  l1 = !git --no-pager log -1 --decorate --date=relative
  lref = log --pretty=tformat:'%C(auto)%h %aN %s %ad' --date=relative 'HEAD@{1}'...
  lpref = log -p --pretty=tformat:'%C(auto)%h %aN %s %ad' --date=relative 'HEAD@{1}'...
  lp = log -p
  stat = log --stat

  mt = mergetool
  mmr = "!f() { git merge --no-commit --no-ff \"$@\"; git commit; }; f"

  mb = !git merge-base HEAD \"$(git config --default master --get user.reviewBase)\"

  rs = reset
  rh = reset --hard
  unstage = reset HEAD
  del = "!f() { git reset HEAD \"$@\"; git clean -f -- \"$@\"; git checkout -- \"$@\" 2>/dev/null; }; f"

  rb = rebase
  rc = rebase --continue
  ra = rebase --abort
  rk = rebase --skip

  st = status --short --branch
  ms = multistatus
  dotfiles = "!git multistatus ~/.dotfiles ~/.dotfiles/repos/public ~/.dotfiles/repos/private ~/'Library/Application Support/Code/User'"
  codebase = "!f() { fasd -dl | sed 's|$|/.git|' | xargs ls -d 2> /dev/null | sed 's/.git$//' | xargs git multistatus; }; f"
  all= "!f() { find . -maxdepth 4 -type d -name .git \"$@\" -prune | sed 's/.git$//' | xargs git multistatus; }; f"

  ls = ls-files
  grep = grep -Ii
  rg = "!git ls-files -z | xargs -0 rg"

  assume = update-index --assume-unchanged
  unassume = update-index --no-assume-unchanged
  assumed = "!git ls-files -v | grep '^h' | cut -c 3-"
  unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
  assumeall = "!git status -s | awk {'print $2'} | xargs git assume"
  exclude = "!f() { dir=$(git rev-parse --show-toplevel 2> /dev/null); [ -n \"$dir\" ] || return 1; for i in \"$@\"; do echo \"$i\" >> \"$dir\"/.git/info/exclude; done; }; f"

  lasttag = describe --tags --abbrev=0
  lt = describe --tags --abbrev=0

  ours = "!f() { git checkout --ours \"$@\" && git add \"$@\"; }; f"
  theirs = "!f() { git checkout --theirs "$@" && git add \"$@\"; }; f"

  purr = pull --rebase
  current = "!f() { local remote=$(git config --default origin --get user.currentRemote) branch=$(git rev-parse --abbrev-ref HEAD) args=(); for a; do case \"$a\" in (-*) args=(\"${args[@]}\" \"$a\");; (*) remote=\"$a\" ;; esac; done; git push \"${args[@]}\" \"${remote}\" \"$branch:$branch\"; }; f"
  new = "!f() { git init; cp ~/.ignore .gitignore; git add -f .gitignore; git commit -m 'initial commit'; }; f"

  ready = rebase -i @{u}
  whatsup = diff @{u}
  giveup = reset --hard @{u}

  me = "!f() { git config user.email __EMAIL__; git config user.signingkey 1523FD9C60A9CD14; }; f"

[color "branch"]
  current = blue bold
[color "diff"]
	frag = magenta bold
	commit = yellow bold
	old = red bold
	new = green bold
	whitespace = red reverse
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22
[color]
	ui = true
[push]
  default = simple
[log]
  date = iso
[difftool]
  prompt = false
[mergetool]
  prompt = false
[url "ssh://git@github.com/"]
  pushInsteadOf = https://github.com/

[core]
  excludesfile = "__HOME__/.ignore"
  autocrlf = false
  pager = less -F -X

[rerere]
  enabled = true

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

[user]
  name = __NAME__
  useConfigOnly = true
  reviewBase = master
