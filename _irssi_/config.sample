servers = (
  { address = "irc.oftc.net"; chatnet = "OFTC"; port = "6667"; },
  {
    address = "roddenberry.freenode.net";
    chatnet = "Freenode";
    port = "6697";
    use_ssl = "yes";
  },
  {
    address = "localhost";
    chatnet = "Bitlbee";
    port = "6667";
    password = "PASSWORD";
    use_ssl = "no";
    ssl_verify = "no";
    autoconnect = "yes";
  }
);

chatnets = {
  OFTC = {
    type = "IRC";
    nick = "doitian";
    realname = "Ian Yang";
    max_kicks = "1";
    max_msgs = "3";
    max_whois = "30";
  };
  Bitlbee = {
    type = "IRC";
    nick = "ian";
    username = "ian";
    realname = "Ian Yang";
    autosendcmd = "wait 2000; /msg &bitlbee identify PASSWORD";
  };
  Freenode = {
    type = "IRC";
    nick = "doitian";
    realname = "Ian Yang";
    max_kicks = "1";
    max_msgs = "3";
    max_whois = "30";
  };
};

channels = (
);

aliases = {
  J = "join";
  WJOIN = "join -window";
  WQUERY = "query -window";
  LEAVE = "part";
  BYE = "quit";
  EXIT = "quit";
  SIGNOFF = "quit";
  DESCRIBE = "action";
  DATE = "time";
  HOST = "userhost";
  LAST = "lastlog";
  SAY = "msg *";
  WI = "whois";
  WII = "whois $0 $0";
  WW = "whowas";
  W = "who";
  N = "names";
  M = "msg";
  T = "topic";
  C = "clear";
  CL = "clear";
  K = "kick";
  KB = "kickban";
  KN = "knockout";
  BANS = "ban";
  MUB = "unban *";
  UB = "unban";
  IG = "ignore";
  UNIG = "unignore";
  SB = "scrollback";
  UMODE = "mode $N";
  WC = "window close";
  WN = "window new hide";
  SV = "say Irssi $J ($V) - http://irssi.org/";
  GOTO = "sb goto";
  CHAT = "dcc chat";
  RUN = "SCRIPT LOAD";
  CALC = "exec - if command -v bc >/dev/null 2>&1\\; then printf '%s=' '$*'\\; echo '$*' | bc -l\\; else echo bc was not found\\; fi";
  SBAR = "STATUSBAR";
  INVITELIST = "mode $C +I";
  Q = "QUERY";
  "MANUAL-WINDOWS" = "set use_status_window off;set autocreate_windows off;set autocreate_query_level none;set autoclose_windows off;set reuse_unused_windows on;save";
  EXEMPTLIST = "mode $C +e";
  ATAG = "WINDOW SERVER";
  UNSET = "set -clear";
  RESET = "set -default";

  aw = "away -all i'm off, /msg me if you got something important";
  aw_afk = "away -all ...afk...";
  aw_eat = "away -all ...recharge energy...";
  aw_zzz = "away -all ...zZzZZ...";

  b = "msg &bitlbee";

  st = "window goto 99;window size 30";
  stc = "window goto 99;window size 9;window last";
  quit = "echo /quit: dude, are you serious?";
  cat = "exec -out cat";
  standup = "exec -out cat ~/Documents/standup.markdown";
};

statusbar = {
  # formats:
  # when using {templates}, the template is shown only if it's argument isn't
  # empty unless no argument is given. for example {sb} is printed always,
  # but {sb $T} is printed only if $T isn't empty.

  items = {
    # start/end text in statusbars
    barstart = "{sbstart}";
    barend = "{sbend}";

    topicbarstart = "{topicsbstart}";
    topicbarend = "{topicsbend}";

    # treated "normally", you could change the time/user name to whatever
    time = "{sb $Z}";
    user = "{sb {sbnickmode $cumode}$N{sbmode $usermode}{sbaway $A}}";

    # treated specially .. window is printed with non-empty windows,
    # window_empty is printed with empty windows
    window = "{sb $winref:$tag/$itemname{sbmode $M}}";
    window_empty = "{sb $winref{sbservertag $tag}}";
    prompt = "{prompt $[.15]itemname}";
    prompt_empty = "{prompt $winname}";
    topic = " $topic";
    topic_empty = " Irssi v$J - http://www.irssi.org";

    # all of these treated specially, they're only displayed when needed
    lag = "{sb Lag: %m$0-%n}";
    act = "{sb Act: $0-}";
    more = "%k%3-- more --%n";
  };

  # there's two type of statusbars. root statusbars are either at the top
  # of the screen or at the bottom of the screen. window statusbars are at
  # the top/bottom of each split window in screen.
  default = {
    # the "default statusbar" to be displayed at the bottom of the window.
    # contains all the normal items.
    window = {
      disabled = "no";

      # window, root
      type = "window";
      # top, bottom
      placement = "bottom";
      # number
      position = "1";
      # active, inactive, always
      visible = "active";

      # list of items in statusbar in the display order
      items = {
        barstart = { priority = "100"; };
        colours = { };
        time = { };
        user = { };
        window = { };
        usercount = { };
        window_empty = { };
        lag = { priority = "-1"; };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
        window_switcher = { };
      };
    };

    # statusbar to use in inactive split windows
    window_inact = {
      type = "window";
      placement = "bottom";
      position = "1";
      visible = "inactive";
      items = {
        barstart = { priority = "100"; };
        window = { };
        window_empty = { };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
      };
    };

    # we treat input line as yet another statusbar :) It's possible to
    # add other items before or after the input line item.
    prompt = {
      type = "root";
      placement = "bottom";
      # we want to be at the bottom always
      position = "100";
      visible = "always";
      items = {
        prompt = { priority = "-1"; };
        prompt_empty = { priority = "-1"; };
        # treated specially, this is the real input line.
        input = { priority = "10"; };
      };
    };

    # topicbar
    topic = {
      type = "root";
      placement = "top";
      position = "1";
      visible = "always";
      items = {
        topicbarstart = { priority = "100"; };
        topic = { };
        topic_empty = { };
        topicbarend = { priority = "100"; alignment = "right"; };
      };
    };
    awl_0 = {
      items = {
        barstart = { priority = "100"; };
        awl_0 = { };
        barend = { priority = "100"; alignment = "right"; };
      };
    };
  };
};
settings = {
  core = {
    real_name = "Ian Yang";
    user_name = "ian";
    nick = "ian";
    timestamp_format = "%H:%M";
    awaylog_file = "~/.irclogs/away.log";
  };
  "fe-text" = { actlist_sort = "refnum"; term_force_colors = "yes"; };
  "fe-common/core" = {
    autocreate_query_level = "MSGS DCCMSGS";
    use_status_window = "yes";
    use_msgs_window = "no";
    autoclose_windows = "no";
    reuse_unused_windows = "yes";
    windows_auto_renumber = "no";
    autolog_path = "~/.irclogs/$tag/%Y-%m.$0.log";
    autolog = "yes";
    show_nickmode = "yes";
    theme = "solarized-universal";
    hilight_color = "%r";
    activity_hide_level = "  JOINS PARTS QUITS MODES NICKS KICKS";
    activity_hide_targets = " &bitlbee &hipchat";
    autolog_level = "all -crap -clientcrap -ctcps -joins -kicks -parts -quits -modes -nicks";
  };
  "irc/core" = { alternate_nick = "doitian"; };
  "perl/core/scripts" = {
    awl_display_key_active = "%8%7%k[$N:$C]%8%K";
    awl_display_nokey_active = "%8%7%k[$N:$C]%8%K";
    awl_display_key = "%8%c%0[$H$Q:$C$S%c%0]%8%K";
    awl_display_nokey = "%8%c%0[$H$N:$C$S%c%0]%8%K";

    trackbar_style = "%B";
    openurl_app_http = "x-www-browser \"$1\" > /dev/null 2>&1 &";
    openurl_watch_mail = "no";
    notify_cmd = "irssi_notify";
    notify_when_away = "yes";
    bitlbee_autoreply_duration = "yes";
    tmux_away_window = "19";
    openurl_max_urls = "50";
  };
};
hilights = (
  {
    text = "([^-_a-zA-Z0-9]|^)ian([^-_a-zA-Z0-9]|$)";
    regexp = "yes";
    color = "%R";
    nick = "yes";
    word = "yes";
  },
  { text = "iany.me"; color = "%R"; nick = "yes"; word = "yes"; },
  {
    text = "doitian([^-_a-zA-Z0-9]|$)";
    color = "%R";
    line = "yes";
    regexp = "yes";
  },
  {
    text = "@all([^-_a-zA-Z0-9]|$)";
    color = "%R";
    word = "yes";
    regexp = "yes";
  }
);
logs = { };
keyboard = (
  { key = "meta--"; id = "command"; data = "window shrink"; },
  { key = "meta-="; id = "command"; data = "window grow"; },
  { key = "meta-x"; id = "command"; data = "window last"; },
  { key = "meta-z"; id = "command"; data = "window goto active"; },
  { key = "meta-`"; id = "command"; data = "st "; },
  { key = "meta-~"; id = "command"; data = "stc "; },
  { key = "^F"; id = "forward_character"; data = ""; },
  { key = "^B"; id = "backward_character"; data = ""; },
  { key = "meta-,"; id = "previous_window"; data = ""; },
  { key = "meta-."; id = "next_window"; data = ""; },
  { key = "meta-<"; id = "scroll_start"; data = ""; },
  { key = "meta->"; id = "scroll_end"; data = ""; },
  { key = "meta-h"; id = "previous_window"; data = ""; },
  { key = "meta-l"; id = "next_window"; data = ""; },
  { key = "meta-j"; id = "scroll_forward"; data = ""; },
  { key = "meta-k"; id = "scroll_backward"; data = ""; },
  { key = "^P"; id = "forward_history"; data = ""; },
  { key = "^N"; id = "backward_history"; data = ""; },
  { key = "^W^W"; id = "command"; data = "window last"; },
  { key = "^W^J"; id = "command"; data = "window down"; },
  { key = "^W^K"; id = "command"; data = "window up"; },
  { key = "^W^H"; id = "previous_window"; data = ""; },
  { key = "^W^L"; id = "next_window"; data = ""; },
  { key = "^R"; id = "command"; data = "history_search "; },
  { key = "^G"; id = "multi"; data = "erase_line;insert_text /ws "; },
  { key = "meta-g"; id = "command"; data = "ws "; }
);
ignores = ( { level = "JOINS PARTS QUITS KICKS MODES NICKS"; } );
windows = {
  1 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#chinateam";
        tag = "Intridea";
      }
    );
  };
  2 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "&hipchat";
        tag = "Bitlbee";
      }
    );
  };
  15 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#twitter_doitian";
        tag = "Bitlbee";
      }
    );
  };
  18 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "&bitlbee";
        tag = "Bitlbee";
      }
    );
  };
  19 = { immortal = "yes"; name = "*st*"; level = "ALL"; };
  99 = { name = "hilight"; sticky = "yes"; };
};
mainwindows = {
  1 = { first_line = "11"; lines = "51"; };
  99 = { first_line = "1"; lines = "10"; };
};
