#!/usr/bin/python2
# -*- coding: utf-8 -*-
#
# Copyright 2008 Evenflow, Inc.
# Copyright 2009 Christian Morlok
#
# dropbox
# Dropbox frontend script
# This file is part of nautilus-dropbox 0.6.1.
#
# nautilus-dropbox is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# nautilus-dropbox is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with nautilus-dropbox.  If not, see <http://www.gnu.org/licenses/>.
#

from __future__ import with_statement

import sys
import optparse
import socket
import os
import time
import threading
import subprocess
import fcntl
import errno
import locale
from contextlib import closing

INFO = u"Dropbox is the easiest way to share and store your files online. Want to learn more? Head to"
LINK = u"http://www.getdropbox.com/"

DROPBOXD_PATH = "/opt/dropbox/dropboxd"
DROPBOXD_PATH = os.path.abspath(DROPBOXD_PATH).decode(sys.getfilesystemencoding())

enc = locale.getpreferredencoding()
def console_print(st=u"", f=sys.stdout, linebreak=True):
    global enc
    assert type(st) is unicode
    f.write(st.encode(enc))
    if linebreak: f.write(os.linesep)

def console_flush(f=sys.stdout):
    f.flush()

def yes_no_question(question):
    while True:
        console_print(question, linebreak=False)
        console_print(u" [y/n] ", linebreak=False)
        console_flush()
        text = raw_input()
        if text.lower().startswith("y"):
            return True
        elif text.lower().startswith("n"):
            return False
        else:
            console_print(u"Sorry, I didn't understand that. Please type yes or no.")

def is_dropbox_running():
    pidfile = os.path.expanduser("~/.dropbox/dropbox.pid")

    try:
        with open(pidfile, "r") as f:
            pid = int(f.read())
        with open("/proc/%d/cmdline" % pid, "r") as f:
            cmdline = f.read().lower()
    except:
        cmdline = ""

    return "dropbox" in cmdline

def unicode_abspath(path):
    global enc
#    assert type(path) is unicode
    # shouldn't pass unicode to this craphead, it appends with os.getcwd() which is always a str
    return os.path.abspath(path.encode(sys.getfilesystemencoding())).decode(sys.getfilesystemencoding())

class DropboxCommand(object):
    class CouldntConnectError(Exception): pass
    class BadConnectionError(Exception): pass
    class EOFError(Exception): pass
    class CommandError(Exception): pass

    def __init__(self):
        self.s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        self.s.settimeout(3)
        try:
            self.s.connect(os.path.expanduser(u'~/.dropbox/command_socket'))
        except socket.error, e:
            raise DropboxCommand.CouldntConnectError()
        self.f = self.s.makefile("r+", 4096)

    def close(self):
        self.f.close()
        self.s.close()

    def __readline(self):
        try:
            toret = self.f.readline().decode('utf8').rstrip(u"\n")
        except socket.error, e:
            raise DropboxCommand.BadConnectionError()
        if toret == '':
            raise DropboxCommand.EOFError()
        else:
            return toret

    # atttribute doesn't exist, i know what you want
    def send_command(self, name, args):
        self.f.write(name.encode('utf8'))
        self.f.write(u"\n".encode('utf8'))
        self.f.writelines((u"\t".join([k] + (list(v)
                                             if hasattr(v, '__iter__') else
                                             [v])) + u"\n").encode('utf8')
                          for k,v in args.iteritems())
        self.f.write(u"done\n".encode('utf8'))
                
        self.f.flush()

        ok = self.__readline() == u"ok"
        if ok:
            toret = {}
            for i in range(21):
                if i == 20:
                    raise Exception(u"close this connection!")

                line = self.__readline()
                if line == u"done":
                    break
                        
                argval = line.split(u"\t")
                toret[argval[0]] = argval[1:]

            return toret
        else:
            problems = []
            for i in range(21):
                if i == 20:
                    raise Exception(u"close this connection!")

                line = self.__readline()
                if line == u"done":
                    break
                        
                problems.append(line)
                    
            raise DropboxCommand.CommandError(u"\n".join(problems))

    # this is the hotness, auto marshalling
    def __getattr__(self, name):
        try:
            return super(DropboxCommand, self).__getattr__(name)
        except:
            def __spec_command(**kw):
                return self.send_command(unicode(name), kw)
            self.__setattr__(name, __spec_command)
            return __spec_command

commands = {}

def command(meth):
    global commands
    assert meth.__doc__, "All commands need properly formatted docstrings (even %r!!)" % meth
    if hasattr(meth, 'im_func'): # bound method, if we ever have one
        meth = meth.im_func
    commands[meth.func_name] = meth
    return meth

def requires_dropbox_running(meth):
    def newmeth(*n, **kw):
        if is_dropbox_running():
            return meth(*n, **kw)
        else:
            console_print(u"Dropbox isn't running!")            
    newmeth.func_name = meth.func_name
    newmeth.__doc__ = meth.__doc__
    return newmeth

def start_dropbox():
    if os.access(DROPBOXD_PATH, os.X_OK):
        f = open("/dev/null", "w")
        # we don't reap the child because we're gonna die anyway, let init do it
        a = subprocess.Popen([DROPBOXD_PATH], preexec_fn=os.setsid, cwd=os.path.expanduser("~"),
                             stderr=sys.stderr, stdout=f, close_fds=True)
        
        # in seconds
        interval = 0.5
        wait_for = 60
        for i in xrange(int(wait_for / interval)):
            if is_dropbox_running():
                return True
            # back off from connect for a while
            time.sleep(interval)
                
        return False
    else:
        return False

@command
@requires_dropbox_running
def filestatus(args):
    u"""get current sync status of one or more files
dropbox filestatus [-l] [-a] [FILE]...

Prints the current status of each FILE.

options:
  -l --list  prints out information in a format similar to ls. works best when your console supports color :)
  -a --all   do not ignore entries starting with .
"""
    oparser = optparse.OptionParser()
    oparser.add_option("-l", "--list", action="store_true", dest="list")
    oparser.add_option("-a", "--all", action="store_true", dest="all")
    (options, args) = oparser.parse_args(args)

    # first check if dropbox is already running
    try:
        with closing(DropboxCommand()) as dc:
            if options.list:
                # TODO: ls style columns

                if len(args) == 0:
                    dirs, nondirs = [u"."], []
                else:
                    dirs, nondirs = [], []

                    for a in args:
                        try:
                            (dirs if os.path.isdir(a) else nondirs).\
                                append(a.decode(sys.getfilesystemencoding()))
                        except UnicodeDecodeError:
                            pass

                    if len(dirs) == 0 and len(nondirs) == 0:
                        exit(1)

                def lowerkey(st):
                    return st.lower()

                dirs.sort(key=lowerkey)
                nondirs.sort(key=lowerkey)

                def printstatus(fp):
                    if not os.path.exists(fp):
                        console_print(u"%s (File doesn't exist!)" % os.path.basename(fp))
                        return

                    try:
                        status = dc.icon_overlay_file_status(path=fp).get(u'status', [None])[0]
                    except DropboxCommand.CommandError, e:
                        console_print(u"%s (%s)" % (os.path.basename(fp), e))
                        return

                    if not sys.stdout.isatty():
                        console_print(os.path.basename(fp))
                        return

                    if status == u"up to date":
                        INIT, CLEANUP = "\x1b[32m", "\x1b[0m"
                    elif status == u"syncing":
                        INIT, CLEANUP = "\x1b[36m", "\x1b[0m"
                    elif status == u"unsyncable":
                        INIT, CLEANUP = "\x1b[41m", "\x1b[0m"
                    else:
                        INIT, CLEANUP = '', ''

                    console_print(u"%s%s%s" % (INIT, os.path.basename(fp), CLEANUP))

                def printdir(name):
                    for subname in sorted(os.listdir(name), key=lowerkey):
                        if type(subname) != unicode:
                            continue
                        
                        if not options.all and subname[0] == u'.':
                            continue

                        try:
                            printstatus(unicode_abspath(os.path.join(name, subname)))
                        except (UnicodeEncodeError, UnicodeDecodeError), e:
                            continue
                try:
                    if len(dirs) == 1 and len(nondirs) == 0:
                        printdir(dirs[0])
                    else:
                        for name in nondirs:
                            try:
                                printstatus(unicode_abspath(name))
                            except (UnicodeEncodeError, UnicodeDecodeError), e:
                                continue

                        if len(nondirs) == 0:
                            console_print(dirs[0] + u":")
                            printdir(dirs[0])
                            dirs = dirs[1:]

                        for name in dirs:
                            console_print()
                            console_print(name + u":")
                            printdir(name)
                except DropboxCommand.EOFError:
                    console_print(u"Dropbox daemon stopped.")
                except DropboxCommand.BadConnectionError, e:
                    console_print(u"Dropbox isn't responding!")
            else:
                if len(args) == 0:
                    args = [name for name in os.listdir(u".") if type(name) == unicode]
                indent = max(len(st)+1 for st in args)
                for file in args:
                    try:
                        fp = unicode_abspath(file)
                    except (UnicodeEncodeError, UnicodeDecodeError), e:
                        continue
                    if not os.path.exists(fp):
                        console_print(u"%-*s %s" % \
                                          (indent, file+':', "File doesn't exist"))
                        continue
                        
                    try:
                        status = dc.icon_overlay_file_status(path=fp).get(u'status', [u'unknown'])[0]
                        console_print(u"%-*s %s" % (indent, file+':', status))
                    except DropboxCommand.CommandError, e:
                        console_print(u"%-*s %s" % (indent, file+':', e))
    except DropboxCommand.CouldntConnectError, e:
        console_print(u"Dropbox isn't running!")

@command
@requires_dropbox_running
def ls(args):
    u"""list directory contents with current sync status
dropbox ls [FILE]...

This is an alias for filestatus -l
"""
    return filestatus(["-l"] + args)

@command
@requires_dropbox_running
def puburl(args):
    u"""get public url of a file in your dropbox
dropbox puburl FILE

Prints out a public url for FILE.
"""
    if len(args) != 1:
        console_print(puburl.__doc__,linebreak=False)
        return

    try:
        with closing(DropboxCommand()) as dc:
            try:
                console_print(dc.get_public_link(path=unicode_abspath(args[0].decode(sys.getfilesystemencoding()))).get(u'link', [u'No Link'])[0])
            except DropboxCommand.CommandError, e:
                console_print(u"Couldn't get public url: " + str(e))
            except DropboxCommand.BadConnectionError, e:
                console_print(u"Dropbox isn't responding!")        
            except DropboxCommand.EOFError:
                console_print(u"Dropbox daemon stopped.")
    except DropboxCommand.CouldntConnectError, e:
        console_print(u"Dropbox isn't running!")

@command
@requires_dropbox_running
def status(args):
    u"""get current status of the dropboxd
dropbox status

Prints out the current status of the Dropbox daemon.
"""
    if len(args) != 0:
        console_print(status.__doc__,linebreak=False)
        return

    try:
        with closing(DropboxCommand()) as dc:
            try:
                lines = dc.get_dropbox_status()[u'status']
                if len(lines) == 0:
                    console_print(u'Idle')                    
                else:
                    for line in lines:
                        console_print(line)
            except KeyError:
                console_print(u"Couldn't get status: daemon isn't responding")
            except DropboxCommand.CommandError, e:
                console_print(u"Couldn't get status: " + str(e))
            except DropboxCommand.BadConnectionError, e:
                console_print(u"Dropbox isn't responding!")
            except DropboxCommand.EOFError:
                console_print(u"Dropbox daemon stopped.")
    except DropboxCommand.CouldntConnectError, e:
        console_print(u"Dropbox isn't running!")

@command
@requires_dropbox_running
def stop(args):
    u"""stop dropboxd
dropbox stop

Stops the dropbox daemon.
"""
    try:
        with closing(DropboxCommand()) as dc:
            try:
                dc.tray_action_hard_exit()
            except DropboxCommand.BadConnectionError, e:
                console_print(u"Dropbox isn't responding!")        
            except DropboxCommand.EOFError:
                console_print(u"Dropbox daemon stopped.")
    except DropboxCommand.CouldntConnectError, e:
        console_print(u"Dropbox isn't running!")

@command
def start(argv):
    u"""start dropboxd
dropbox start [-i]
    
Starts the dropbox daemon, dropboxd. If dropboxd is already running, this will do nothing.

"""
    
    # first check if dropbox is already running
    if is_dropbox_running():
        console_print(u"Dropbox is already running!")
        return

    console_print(u"Starting Dropbox...", linebreak=False)
    console_flush()
    if not start_dropbox():
        console_print()
        console_print(u"The Dropbox daemon is not installed!")
        return
    console_print(u"Done!")

@command
def help(argv):
    u"""provide help
dropbox help [COMMAND]

With no arguments, print a list of commands and a short description of each. With a command, print descriptive help on how to use the command.
"""
    if not argv:
        return usage(argv)
    for command in commands:
        if command == argv[0]:
            console_print(commands[command].__doc__.split('\n', 1)[1].decode('ascii'))
            return
    console_print(u"unknown command '%s'" % argv[0], f=sys.stderr)

def usage(argv):
    console_print(u"Dropbox command-line interface\n")
    console_print(u"commands:\n")
    out = []
    for command in commands:
        out.append((command, commands[command].__doc__.splitlines()[0]))
    spacing = max(len(o[0])+3 for o in out)
    for o in out:
        console_print(" %-*s%s" % (spacing, o[0], o[1]))
    console_print()

def main(argv):
    global commands

    # now we need to find out if one of the commands are in the
    # argv list, and if so split the list at the point to
    # separate the argv list at that point
    cut = None
    for i in range(len(argv)):
        if argv[i] in commands:
            cut = i
            break
    
    if cut == None:
        usage(argv)
        return

    # lol no options for now
    globaloptionparser = optparse.OptionParser()
    globaloptionparser.parse_args(argv[0:i])

    # now dispatch and run
    return commands[argv[i]](argv[i+1:])

if __name__ == "__main__":
    main(sys.argv)
